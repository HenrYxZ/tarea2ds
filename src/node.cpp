// Class automatically generated by Dev-C++ New Class wizard

#include "node.h" // class's header file

Node::Node(string key, int value){
      _key = key;
      _value = value;
      _father = NULL;
      _left = NULL;
      _right = NULL;
      _isRed = true;
      _high = 1;                  
}
Node::~Node(){
      
}        

Node* Node::getBrother(){
      if(_father == NULL)
        return NULL;
      if(_father->getLeft() == this)
        return _father->getRight();
      else
        return _father->getLeft();
}

Node* Node::getFather(){
      return _father;
}

string Node::getKey(){
       return _key;
}

Node* Node::getLeft(){
      return _left;
}

Node* Node::getRight(){
      return _right;
}

Node* Node::inOrder(){
      
      //si el nodo derecho es nulo devuelve el izq (puede ser NULL)
      if(_right == NULL)
       return _left;
       
       //devuelve el nodo más a la izquierda del subarbol derecho
      return maxLeft(_right);
}

Node* Node::maxLeft(Node* n){
      if(n->getLeft() == NULL)
        return n;
      else
        return maxLeft(n);
}

int Node::getValue(){
    return _value;
}

int Node::getHigh(){
    return _high;
}

bool Node::isRed(){
     return _isRed;
}

void Node::recolor(){
     if(this->isRed())
       _isRed = false;
     else
       _isRed = true;

}

void Node::setFather(Node* fnode){
     _father = fnode;
}

void Node::setisRed(bool is){
     _isRed = is;
}

void Node::setKey(string k){
     _key = k;
}

void Node::setLeft(Node* lnode){
     _left=lnode;
}

void Node::setRight(Node* rnode){
     _right = rnode;
}

void Node::setValue(int v){
     _value = v;
}

void Node::setHigh(int h){
     _high = h;
}

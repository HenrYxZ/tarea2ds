// Class automatically generated by Dev-C++ New Class wizard

#include "tNode.h" // class's header file

// class constructor
tNode::tNode(string key,int value): _key(key),_value(value),_dummy(false)
{
    _priority=randomP();
    
}
tNode::tNode(string key,int value,int priority): _key(key),_value(value),_dummy(false),_priority(priority)
{
    
}
tNode::tNode(): _key(""),_value(0),_dummy(true),_priority(101)
{
    
}
tNode& tNode::operator= (const tNode &tNodeSource)
{
    _value=tNodeSource._value;
	_key=tNodeSource._key;
	_left=tNodeSource._left;
	_right=tNodeSource._right;
	_priority=tNodeSource._priority;
	_dummy=tNodeSource._dummy;
    
    return *this;
}

// class destructor
tNode::~tNode()
{
	
	// insert your code here
}
void tNode::unDummy(string k,int v, int p)
{
    _key=k;
    _value=v;
    _priority=p;
    _dummy=false;
    tNode* dummyLeft=new tNode();
    tNode* dummyRight=new tNode();

    _left=dummyLeft;
    _right=dummyRight;
    
}
int tNode::getPriority()
{
    return _priority;
}

int tNode::getValue()
{
    return _value;
}

string tNode::getKey()
{
    return _key;
}
tNode* tNode::getLeft()
{
    return _left;
}
tNode* tNode::getRight()
{
    return _right;
}
void tNode::setDummy()
{
    _priority=101;
    _dummy=true;
    return;
}
bool tNode::isDummy()
{
    return _dummy;
}

void tNode::setLeft(tNode* lNode)
{
    _dummy=false;
    _left=lNode;
}
void tNode::setRight(tNode* rNode)
{
    _dummy=false;
    _left=rNode;
}
